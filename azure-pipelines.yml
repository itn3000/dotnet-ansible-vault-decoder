trigger:
  branches:
    include:
      - refs/tags/*
      - "master"
stages:
  - stage: Build
    jobs:
      - job:
        strategy:
          matrix:
            windows:
              imageName: 'windows-2019'
              rid: "win-x64"
              PLATFORMLINKER: ""
              ExE_FILE_ExT: ".exe"
            linux-x64:
              imageName: 'ubuntu-16.04'
              rid: "linux-x64"
              PLATFORMLINKER: "clang-6.0"
              EXE_FILE_EXT: ""
            macos-x64:
              imageName: "macos-10.13"
              rid: "osx-x64"
              PLATFORMLINKER: ""
              EXE_FILE_EXT: ""
        pool:
          vmImage: $(imageName)

        steps:
          - script: |
              sudo apt-get update
              sudo apt-get install -y libkrb5-dev libcurl-dev
            condition: "eq(variables['imageName'],'ubuntu-16.04')"
            name: "install_packages"
          - task: DotNetCoreCLI@2
            name: "restore_solution"
            displayName: "restoring solution"
            inputs:
              command: 'restore'
              feedsToUse: config
              nugetConfigPath: "nuget.config"
              projects: "dotnet-anv.sln"
          - task: DotNetCoreCLI@2
            name: "build_solution"
            inputs:
              command: "build"
              feedsToUse: config
              nugetConfigPath: "nuget.config"
              configuration: "release"
              projects: "dotnet-anv.sln"
          - task: DotNetCoreCLI@2
            name: "test_solution"
            inputs:
              command: "test"
              feedsToUse: config
              nugetConfigPath: "nuget.config"
              configuration: "Release"
              projects: "dotnet-anv.sln"
          - task: DotNetCoreCLI@2
            name: "pack_solution"
            inputs:
              command: "pack"
              feedsToUse: config
              nugetConfigPath: "nuget.config"
              configuration: "release"
              packagesToPack: "dotnet-ansible-vault-decoder/dotnet-ansible-vault-decoder.csproj"
          - task: DotNetCoreCLI@2
            name: "publish_project"
            env:
              CppCompilerAndLinker: $(PLATFORMLINKER)
            inputs:
              feedsToUse: config
              nugetConfigPath: "nuget.config"
              command: "custom"
              custom: "publish"
              arguments: "-c Release -r $(rid) -p:PackAsTool=false -p:WithCoreRT=true"
              projects: "dotnet-ansible-vault-decoder/dotnet-ansible-vault-decoder.csproj"
              publishWebProjects: false
          - task: CopyFiles@2
            name: "copying_nupkg"
            inputs:
              sourceFolder: "dotnet-ansible-vault-decoder/bin/Release"
              contents: "**/*.nupkg"
              targetFolder: "$(Build.ArtifactStagingDirectory)"
          - task: CopyFiles@2
            name: "copying_executable"
            displayName: "copying binary executable"
            inputs:
              sourceFolder: "dotnet-ansible-vault-decoder/bin/Release/netcoreapp2.1/$(rid)/native/"
              contents: "dotnet-ansible-vault-decoder$(ExE_FILE_ExT)"
              targetFolder: "$(Build.ArtifactStagingDirectory)/dotnet-anv-$(rid)$(EXE_FILE_EXT)"
          - task: CopyFiles@2
            name: "copying_pdb"
            displayName: "copying pdb"
            inputs:
              sourceFolder: "dotnet-ansible-vault-decoder/bin/Release/netcoreapp2.1/$(rid)/native/"
              contents: "dotnet-ansible-vault-decoder.pdb"
              targetFolder: "$(Build.ArtifactStagingDirectory)/dotnet-anv-$(rid).pdb"
            condition: "eq(variables['imageName'],'windows-2019')"
          - task: PublishBuildArtifacts@1
            name: "publishing_artifacts"
            inputs:
              pathToPublish: "$(Build.ArtifactStagingDirectory)"
              artifactName: "dotnet-anv-$(rid)"
  - stage: Release
    condition: "startsWith(variables['Build.SourceBranch'], 'refs/tags/')"
    jobs:
      - job:
        displayName: "Github Release"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: download win-x64
            inputs:
              artifact: dotnet-anv-win-x64
              path: "$(Build.ArtifactStagingDirectory)"
          - task: DownloadPipelineArtifact@2
            displayName: download linux-x64
            inputs:
              artifact: dotnet-anv-linux-x64
              path: "$(Build.ArtifactStagingDirectory)"
          - task: DownloadPipelineArtifact@2
            displayName: download osx-x64
            inputs:
              artifact: dotnet-anv-osx-x64
              path: "$(Build.ArtifactStagingDirectory)"
          - task: GitHubRelease@0
            displayName: "releasing github"
            inputs:
              gitHubConnection: "dotnet-ansible-vault-decoder-servicetoken"
              action: create
              target: "$(Build.SourceVersion)"
              assets: "$(Build.ArtifactStagingDirectory)/**/*"
              isDraft: true

